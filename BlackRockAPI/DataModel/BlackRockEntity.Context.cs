//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BlackRockAPI.DataModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BlackRockEntities : DbContext
    {
        public BlackRockEntities()
            : base("name=BlackRockEntities")
        {
            this.Configuration.LazyLoadingEnabled = false;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Benchmark> Benchmarks { get; set; }
        public virtual DbSet<InvestmentGoal> InvestmentGoals { get; set; }
        public virtual DbSet<InvestmentHorizone> InvestmentHorizones { get; set; }
        public virtual DbSet<Navigation> Navigations { get; set; }
        public virtual DbSet<Risk> Risks { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<SchemeCategory> SchemeCategories { get; set; }
        public virtual DbSet<SchemePlan> SchemePlans { get; set; }
        public virtual DbSet<Scheme> Schemes { get; set; }
        public virtual DbSet<SchemeType> SchemeTypes { get; set; }
        public virtual DbSet<Transaction> Transactions { get; set; }
        public virtual DbSet<TransactionType> TransactionTypes { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<PhysicalPath> PhysicalPaths { get; set; }
    
        public virtual int GetAllUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAllUsers");
        }
    
        public virtual ObjectResult<GetCompleteFundDetails_Result> GetCompleteFundDetails(Nullable<long> fundId)
        {
            var fundIdParameter = fundId.HasValue ?
                new ObjectParameter("fundId", fundId) :
                new ObjectParameter("fundId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompleteFundDetails_Result>("GetCompleteFundDetails", fundIdParameter);
        }
    
        public virtual ObjectResult<GetFunds_Result> GetFunds()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFunds_Result>("GetFunds");
        }
    
        [DbFunction("BlackRockEntities", "GetNewFundEssentials")]
        public virtual IQueryable<GetNewFundEssentials_Result> GetNewFundEssentials()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetNewFundEssentials_Result>("[BlackRockEntities].[GetNewFundEssentials]()");
        }
    
        public virtual int ValidateUser(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ValidateUser", usernameParameter, passwordParameter);
        }
    }
}
